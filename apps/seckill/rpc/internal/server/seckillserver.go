// Code generated by goctl. DO NOT EDIT!
// Source: seckkill.proto

package server

import (
	"context"
	"encoding/json"
	"github.com/zeromicro/go-zero/core/logx"
	"github.com/zhoushuguang/lebron/pkg/batcher"
	"strconv"
	"time"

	"github.com/zhoushuguang/lebron/apps/seckill/rpc/internal/logic"
	"github.com/zhoushuguang/lebron/apps/seckill/rpc/internal/svc"
	"github.com/zhoushuguang/lebron/apps/seckill/rpc/seckill"
)

type SeckillServer struct {
	svcCtx *svc.ServiceContext
	seckill.UnimplementedSeckillServer
	Batcher *batcher.Batcher
}

const (
	limitPeriod       = 5    //时间
	limitQuota        = 1000 //限流数
	seckillUserPrefix = "seckill#u#"
	localCacheExpire  = time.Second * 60

	batcherSize     = 100
	batcherBuffer   = 100
	batcherWorker   = 10
	batcherInterval = time.Second
)

func NewSeckillServer(svcCtx *svc.ServiceContext) *SeckillServer {
	return &SeckillServer{
		svcCtx:  svcCtx,
		Batcher: NewBatcher(svcCtx),
	}
}

func (s *SeckillServer) SeckillProducts(ctx context.Context, in *seckill.SeckillProductsRequest) (*seckill.SeckillProductsResponse, error) {
	l := logic.NewSeckillProductsLogic(ctx, s.svcCtx)
	return l.SeckillProducts(in)
}

func (s *SeckillServer) SeckillOrder(ctx context.Context, in *seckill.SeckillOrderRequest) (*seckill.SeckillOrderResponse, error) {
	l := logic.NewSeckillOrderLogic(ctx, s.svcCtx, s.Batcher)
	return l.SeckillOrder(in)
}

func NewBatcher(svc *svc.ServiceContext) *batcher.Batcher {
	b := batcher.New(
		batcher.WithSize(batcherSize),
		batcher.WithBuffer(batcherBuffer),
		batcher.WithWorker(batcherWorker),
		batcher.WithInterval(batcherInterval),
	)
	b.Sharding = func(key string) int {
		pid, _ := strconv.ParseInt(key, 10, 64)
		return int(pid) % batcherWorker
	}
	b.Do = func(ctx context.Context, val map[string][]interface{}) {
		var msgs []*logic.KafkaData

		for _, vs := range val {
			for _, v := range vs {
				msgs = append(msgs, v.(*logic.KafkaData))
			}
		}


		kd, err := json.Marshal(msgs)

		if err != nil {
			logx.Errorf("Batcher.Do json.Marshal msgs: %v error: %v", msgs, err)
		}

		if err = svc.KafkaPusher.Push(string(kd)); err != nil {
			logx.Errorf("KafkaPusher.Push kd: %s error: %v", string(kd), err)
		}
	}

	b.Start()
	return b
}
